# -*- coding: utf-8 -*-
"""bagging

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OSNW2ANhknok4ore_PT8YY8I_dJU94sV
"""



import numpy as np

class SimplifiedBaggingRegressor:
    def __init__(self, num_bags, oob=False):
        self.num_bags = num_bags
        self.oob = oob

    def _generate_splits(self, data: np.ndarray):
        '''
        Generate indices for every bag and store in self.indices_list list
        '''
        self.indices_list = []
        data_length = len(data)
        for bag in range(self.num_bags):
            # Your Code Here
            indices = np.random.choice(data_length, size=data_length, replace=True)
            self.indices_list.append(indices)

    def fit(self, model_constructor, data, target):
        '''
        Fit model on every bag.
        Model constructor with no parameters (and with no ()) is passed to this function.

        example:

        bagging_regressor = SimplifiedBaggingRegressor(num_bags=10, oob=True)
        bagging_regressor.fit(LinearRegression, X, y)
        '''
        self.data = None
        self.target = None
        self._generate_splits(data)
        assert len(set(list(map(len, self.indices_list)))) == 1, 'All bags should be of the same length!'
        assert list(map(len, self.indices_list))[0] == len(data), 'All bags should contain `len(data)` number of elements!'
        self.models_list = []
        self.oob_indices_list = [] #дополнительно создадим список списков индексов для ооб
        for bag in range(self.num_bags):
            model = model_constructor()
            data_bag, target_bag = data[self.indices_list[bag]], target[self.indices_list[bag]]  # Your Code Here

            self.models_list.append(model.fit(data_bag, target_bag)) # store fitted models here
            oob_ind = np.setdiff1d(np.arange(len(data)), self.indices_list[bag]) # создаем список индексов не попавших в текущий бэг
            self.oob_indices_list.append(oob_ind) # сохраняенм список списков индексов для ооб
        if self.oob:
            self.data = data  # Обеспечиваем установку self.data для дальнейшего использования в OOB_score
            self.target = target
    def predict(self, data):
        '''
        Get average prediction for every object from passed dataset
        '''
        # Your code here
        predictions = np.array([model.predict(data) for model in self.models_list])
        return np.mean(predictions, axis=0)

    def _get_oob_predictions_from_every_model(self):
        '''
        Generates list of lists, where list i contains predictions for self.data[i] object
        from all models, which have not seen this object during training phase
        '''
        list_of_predictions_lists = [[] for _ in range(len(self.data))]
        # Your Code Here
        for model, oob_ind in zip(self.models_list, self.oob_indices_list):
            if len(oob_ind) > 0:  # Проверка, что oob_indices не пуст
                oob_predictions = model.predict(self.data[oob_ind])
                for idx, prediction in zip(oob_ind, oob_predictions):
                    list_of_predictions_lists[idx].append(prediction)

        self.list_of_predictions_lists = np.array(list_of_predictions_lists, dtype=object)

    def _get_averaged_oob_predictions(self):
        '''
        Compute average prediction for every object from training set.
        If object has been used in all bags on training phase, return np.nan instead of prediction
        '''
        self._get_oob_predictions_from_every_model()
        self.oob_predictions = np.array([np.mean(predictions) if len(predictions) > 0 else np.nan for predictions in self.list_of_predictions_lists]) # Your Code Here

    def OOB_score(self):
        '''
        Compute mean square error for all objects, which have at least one prediction
        '''
        self._get_averaged_oob_predictions()
        squared_errors = []
        # Проходим по каждому значению oob_predictions и target
        for i in range(len(self.oob_predictions)):
          if not np.isnan(self.oob_predictions[i]):  # Проверяем, не является ли значение np.nan
            error = (self.target[i] - self.oob_predictions[i]) ** 2
            squared_errors.append(error)
        # Если список ошибок пуст, возвращаем np.nan, иначе считаем среднюю ошибку
        return np.nan if len(squared_errors) == 0 else np.mean(squared_errors)